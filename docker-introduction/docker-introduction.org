#+TITLE: DOCKER INTRODUCTION

* Introdução
     #+NAME: docker info
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      docker info      
   #+END_SRC

   #+RESULTS: docker info
   #+begin_example

   Containers: 5
    Running: 1
    Paused: 0
    Stopped: 4
   Images: 317
   Server Version: 1.13.1
   Storage Driver: overlay2
    Backing Filesystem: extfs
    Supports d_type: true
    Native Overlay Diff: true
    Logging Driver: journald
   Cgroup Driver: systemd
   Plugins: 
    Volume: local
    Network: bridge host macvlan null overlay
    Authorization: rhel-push-plugin
   Swarm: inactive
   Runtimes: oci runc
   Default Runtime: oci
   Init Binary: /usr/libexec/docker/docker-init-current
   containerd version:  (expected: aa8187dbd3b7ad67d8e5e3a15115d3eef43a7ed1)
   runc version: N/A (expected: 9df8b306d01f59d3a8029be411de015b7304dd8f)
   init version: N/A (expected: 949e6facb77383876aeff8a6944dde66b3089574)
   Security Options:
    seccomp
     WARNING: You're not using the default seccomp profile
     Profile: /etc/docker/seccomp.json
    selinux
   Kernel Version: 5.0.14-200.fc29.x86_64
   Operating System: Fedora 29 (Twenty Nine)
   OSType: linux
   Architecture: x86_64
   Number of Docker Hooks: 2
   CPUs: 4
   Total Memory: 3.719 GiB
   Name: nsi_pc_149_3.ipgg.saude.sp.gov.br
   ID: UZ65:RC6H:PL3O:2NRT:E4IB:W7JP:O4SA:GTO6:JO5E:N7LI:BQ36:CKW3
   Docker Root Dir: /var/lib/docker
   Debug Mode (client): false
   Debug Mode (server): false
   Http Proxy: http://wagner:nicolas1*@192.168.0.2:3128
   Https Proxy: http://wagner:nicolas1*@192.168.0.2:3128
   Registry: https://index.docker.io/v1/
   Experimental: false
   Insecure Registries:
    127.0.0.0/8
   Live Restore Enabled: true
   Registries: docker.io (secure), registry.fedoraproject.org (secure), quay.io (secure), registry.access.redhat.com (secure), registry.centos.org (secure), docker.io (secure)
   #+end_example

* Operacoes basicas
  
   #+NAME:                     
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      docker 
   #+END_SRC
   
   #+NAME: docker ps -q                     
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      docker ps -q
   #+END_SRC

   #+RESULTS: docker ps -q
   : 
   : 6003905dfd61


** Obter o ip do container
   
   #+NAME: docker inspect --format '{{ .NetworkSettings.IPAddress }}' $(docker ps -q)                     
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      docker inspect --format '{{ .NetworkSettings.IPAddress }}' $(docker ps -q)
   #+END_SRC

   #+RESULTS: docker inspect --format '{{ .NetworkSettings.IPAddress }}' $(docker ps -q)
   : 
   : [wagner@nsi_pc_149_3 docker-introduction]$ 172.17.0.2
   


* onde as imagens do docker ficam?
  
   #+NAME:                     
   #+BEGIN_SRC shell :session s1 :results output :exports both
      #starts code
      sudo ls -l /var/lib/docker/image/overlay2
   #+END_SRC

   #+RESULTS: 
   : 
   : total 20
   : drwx------. 4 root root 4096 jan  3 13:40 distribution
   : drwx------. 4 root root 4096 jan  3 12:28 imagedb
   : drwx------. 5 root root 4096 jan  3 13:41 layerdb
   : -rw-------. 1 root root 4134 mai 16 15:42 repositories.json



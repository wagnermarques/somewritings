#+SETUPFILE: "../etc/org_mode_SETUPFILE.org"
#+INCLUDE: "../etc/org_mode_COMMON_SETUP_FILE.org"
#+INCLUDE: "../etc/org_mode_SETUPFILE_4Beamer.org"

#+TITLE:Maven
#+SUBTITLE: Anotacoes e Notas de Aulas

* Usando maven-jar-plugin pra tornar seu jar executavel
** Tornando seu jar executável
   dar um *mvn package*

   e depois um *java -jar target/pacote.jar*

   gera erro: *"nenhum atributo de manifesto principal em
   target/projetomaven-1.0-SNAPSHOT.jar"*

** começando a resolver com o maven-jar-plugin 
***  site do plugin:
    http://maven.apache.org/plugins-archives/maven-jar-plugin-3.1.0/
*** o que é esse "atributo de manifesto principal que tá faltando?"
    vc precisa de um meta arquivo que indique que o seu jar é
    executável no diretório META do jar (jar é um zip da pasta do projeto)
    
    META-INF/MANIFEST.M

*** O Attributo que tá faltando é esse:
      Main-Class: br.com.fzlbpms.App
      
      que diz que essa é a classe que contém o método main

** configurando o maven-jar-plugin pra criar o Manifest
   Advivinha o que o maven-jar-plugin vai fazer depois de
   configurar-mos ele conforme abaixo?
#+BEGIN_SRC xml
        <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.1.0</version>
        <configuration>
           <archive>
            <index>true</index>
            <manifest>
              <addClasspath>true</addClasspath>
               <mainClass>
               br.com.fzlbpms.App
               </mainClass>
            </manifest>
          </archive>
        </configuration>
        </plugin>
#+END_SRC
Exato, vai criar o arquivo manifest pra nós e como vc pode ver vai
também informar qual é a classe principal do projeto.

** Testando o resultado da configuração do maven-jar-plugin
   Será que foi criado mesmo nosso arquivo, vamos conferir?
   Neste caso precisamos listar os arquivos que estão dentro do nosso
   pacote gerado no build
   
   rode: *jar tf target/pacote.jar*
   
   e veja que temos o arquivo META-INF/MANIFEST.MF incluso em nosso jar

*** jar tf target/projetomaven-1.0-SNAPSHOT.jar
META-INF/MANIFEST.MF

(...)

META-INF/maven/br.com.fzlbpms/

META-INF/maven/br.com.fzlbpms/projetomaven/

br/com/fzlbpms/App.class

META-INF/maven/br.com.fzlbpms/projetomaven/pom.xml

META-INF/maven/br.com.fzlbpms/projetomaven/pom.properties

** Rodando o jar novamente
   Agora que o arquivo foi criado e incluído no nosso jar, vamo ver se
   agora a gente consegue executar...
*** empacote o projeto novamente
    rode  *mvn clean package* 

*** agora rode o jar
    *java -jar target/projetomaven-1.0-SNAPSHOT.jar*

    a saída é *Hello World!*

    funcionou!!!
    
   



* Resolvendo dependencias do seu jar executavel
Entendendo a questao: Vc precisou acessar um banco de dados e incluiu
a dependencia correta no seu pom. Mas quando vc roda o seu jar ele nao
consegue "ver" essa dependencia.
** entendendo o problema da dependencia (a)
   Ao rodar o jar a classe
   com.microsoft.sqlserver.jdbc.SQLServerDriver não é encontrada.  
   #+BEGIN_SRC sh
Exception in thread "main" java.lang.ClassNotFoundException: 
com.microsoft.sqlserver.jdbc.SQLServerDriver
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:338)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:264)
	at br.com.fzlbpms.App.main(App.java:16)   
   #+END_SRC
** entendendo o problema da dependencia (b)
   Essa classe não é de sua programação mas vc precisa dela pra
   conectar com o sqlserver. Na verdade ela está naquela dependencia
   que a gente colocou no nosso pom mas não está disponível para o
   nosso jar. 
  
   Então o problema é que a gente coloca a dependencia no projeto mas
   ela não vai pro jar.
** incluindo a dependencia do projeto
    Vamos incluir uma dependencia pra conectar no sqlserver.
*** inclua isso na sessao *<dependencies>* do seu pom.xml
#+BEGIN_SRC xml
      <dependency>
          <groupId>com.microsoft.sqlserver</groupId>
          <artifactId>mssql-jdbc</artifactId>
          <version>6.1.0.jre7</version>
          <scope>runtime</scope>
</dependency>
#+END_SRC

** conhecendo o maven-antrun-plugin(a)
   Vamos conhecer esse plugin porque é ele que vai copiar aquela
   dependencia do sqlserver pra junto do jar. Teria outras maneiras de
   fazer isso, mas o antrun vale a pena conhecer pelo poder  e
   flexibilidade que ele te da. Tem que ter o ant instalado hein..
** conhecendo o maven-antrun-plugin(b)
*** site do plugin
    https://maven.apache.org/plugins/maven-dependency-plugin/
*** usando o plugin
    Supondo que vc queira colocar as dependencias do seu jar numa
    pasta libs
** usando o maven-antrun-plugin
   Dentro da sessão plugins, colocar o xml abaixo.
** inclua o plugin e essa configuracao no seu pom(a)
    #+BEGIN_SRC xml
     <plugins>
       <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>1.8</version>
        <executions>
        <execution>
            <id>copy-dependencies</id>
            <phase>package</phase>
            <goals>
              <goal>run</goal>
            </goals>
    #+END_SRC

** inclua o plugin e essa configuracao no seu pom(b)
    #+BEGIN_SRC xml
            <configuration>
              <target>
                <echo>maven-antrun-plugin running</echo>
                <dependencyfilesets prefix="dependencias."/>
                <mkdir dir="target/libs"/>
                <copy todir="target/libs">
                  <fileset 
                    refid="dependencias.com.microsoft.sqlserver:mssql-jdbc:jar"/>
                </copy>
              </target>
            </configuration>
         </execution>
        </executions>
      </plugin>
      </plugins>
 #+END_SRC
** confirmando pra ver se as dependencias foram copias
   #+BEGIN_SRC sh :exports both
   ls projetomaven/target/libs
   #+END_SRC

   #+RESULTS:
   : mssql-jdbc-6.1.0.jre7.jar

** ajustando o seu jar pra reconhecer essa pasta lib
O seu jar ainda não sabe que tem que buscar as dependencias nessa
pasta lib. Vc tem que dizer isso pra ele.
*** usando o maven-jar-plugin pra informar das deps na pasta lib
Essa indicação vai na sessão *<archive><manifest>* da configuração do
seu maven-jar-plugin. (veja depois o pom.xml inteiro na pasta projetomaven)
#+BEGIN_SRC xml
<addClasspath>true</addClasspath>
                <classpathPrefix>libs/</classpathPrefix>
#+END_SRC
    

** rodando o jar com dependencias
#+NAME: rodando jar com deps
#+BEGIN_SRC sh :results output :exports both
 java -jar projetomaven/target/projetomaven-1.0-SNAPSHOT.jar 
#+END_SRC

#+RESULTS: rodando jar com deps
: Hello World!
: ConnectionID:1 ClientConnectionId: d0eb0655-74f4-45cd-ad61-eb03b3b9da3c


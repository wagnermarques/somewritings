#+Title: Javafx

* Introducao
Tem duas maneiras de vc criar aplicacoes javafx, usando uma ferramenta de build como maven/ant/gradle ou unsando o javafx sdk[fn:1]

A gente vai aqui nas aulas o gradle e o maven

Com javafx vc pode fazer aplicacoes e compilar pra rodar de forma nativa para as seguintes plataformas[fn:3]:

Linux (x86_64 and AArch64)

Mac OS X (x86_64 and AArch64)

Windows (x86_64)

iOS (x86_64 and arm64)

Android (AArch64)



* Hello World com gradle[fn:4]

#+begin_src sh name: blk1 :exports code :shebang "#!/usr/bin/bash" :tangle ./subjectdir/tangle/tangled.sh  :mkdirp yes
mkdir -p /home/administrador/mnt/hdext/somewritings/javafx/projetos/helloworldwithgradle
export projdir=/home/administrador/mnt/hdext/somewritings/javafx/projetos/helloworldwithgradle
cd $projdir
#+end_src

#+RESULTS:

#+begin_src sh name: blk2 :exports code :shebang "#!/usr/bin/bash" :tangle ./subjectdir/tangle/tangled.sh  :mkdirp yes
cd $projdir
[administrador@fedora helloworldwithgradle]$ gradle init

Select type of project to generate:
  1: basic
  2: application
  3: library
  4: Gradle plugin
Enter selection (default: basic) [1..4] 2

Select implementation language:
  1: C++
  2: Groovy
  3: Java
  4: Kotlin
  5: Scala
  6: Swift
Enter selection (default: Java) [1..6] 3

Split functionality across multiple subprojects?:
  1: no - only one application project
  2: yes - application and library projects
Enter selection (default: no - only one application project) [1..2] 1

Select build script DSL:
  1: Groovy
  2: Kotlin
Enter selection (default: Groovy) [1..2] 1

Generate build using new APIs and behavior (some features may change in the next minor release)? (default: no) [yes, no] 
Select test framework:
  1: JUnit 4
  2: TestNG
  3: Spock
  4: JUnit Jupiter
Enter selection (default: JUnit Jupiter) [1..4] 1

Project name (default: helloworldwithgradle): 
Source package (default: helloworldwithgradle): 

> Task :init
Get more help with your project: https://docs.gradle.org/7.5/samples/sample_building_java_applications.html

BUILD SUCCESSFUL in 1m 18s
2 actionable tasks: 2 executed
[administrador@fedora helloworldwithgradle]$ 
#+end_src


vamos ver o tree do nosso projeto

#+begin_example
[administrador@fedora helloworldwithgradle]$ tree
.
├── app
│   ├── build.gradle
│   └── src
│       ├── main
│       │   ├── java
│       │   │   └── helloworldwithgradle
│       │   │       └── App.java
│       │   └── resources
│       └── test
│           ├── java
│           │   └── helloworldwithgradle
│           │       └── AppTest.java
│           └── resources
├── gradle
│   └── wrapper
│       ├── gradle-wrapper.jar
│       └── gradle-wrapper.properties
├── gradlew
├── gradlew.bat
└── settings.gradle

12 directories, 8 files
[administrador@fedora helloworldwithgradle]$ 

#+end_example

encontre o arquivo build.gradle dentro da pasta app e deixe ele asism...

#+begin_example
/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}


javafx {
    version = "19"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.0.1-jre'
}

application {
    // Define the main class for the application.
    mainClass = 'helloworldwithgradle.App'
}

#+end_example


Agora vc muda a classe App pra ficar conforme abaixo...

#+begin_src java
/*
 * This Java source file was generated by the Gradle 'init' task.
 * https://github.com/openjfx/samples/blob/master/HelloFX/Gradle/hellofx/src/main/java/HelloFX.java
 */
package helloworldwithgradle;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

public class App extends Application {

    @Override
    public void start(Stage stage) {
        String javaVersion = System.getProperty("java.version");
        String javafxVersion = System.getProperty("javafx.version");
        Label l = new Label("Hello, JavaFX " + javafxVersion + ", running on Java " + javaVersion + ".");
        Scene scene = new Scene(new StackPane(l), 640, 480);
        stage.setScene(scene);
        stage.show();
    }

    public static void main(String[] args) {
        launch();
    }

}
#+end_src

Claro que em sala de aula a gente precisa conversar sobre essa classe certo?

agora ja pode dar um *gradlew run*

se vc tiver usando windows fica *gradlew.bat run*

o resultado devera ser...

[[./imgs/helloworldwithgradle1.png]]




#+begin_example
[administrador@fedora helloworldwithgradle]$ ./gradlew run
#+end_example


* Hello World com maven[fn:5]

Pra criar o projeto e so dar esse comando...
#+begin_example
mvn archetype:generate \
        -DarchetypeGroupId=org.openjfx \
        -DarchetypeArtifactId=javafx-archetype-simple \
        -DarchetypeVersion=0.0.3 \
        -DgroupId=org.openjfx \
        -DartifactId=HelloWorldWithMaven \
        -Dversion=1.0.0 \
        -Djavafx-version=19
#+end_example

essa foi a saida aqui na minha maquina...


#+begin_example
[administrador@fedora projetos]$ mvn archetype:generate         -DarchetypeGroupId=org.openjfx         -DarchetypeArtifactId=javafx-archetype-simple         -DarchetypeVersion=0.0.3         -DgroupId=org.openjfx         -DartifactId=HelloWorldWithMaven         -Dversion=1.0.0         -Djavafx-version=19
[WARNING] 
[WARNING] Some problems were encountered while building the effective settings
[WARNING] Unrecognised tag: 'pluginRepository' (position: START_TAG seen ...<profiles>\r\n    <pluginRepository>... @202:23)  @ /home/administrador/mnt/hdext/fzlbpms/fzlStudio/integrated/build/apache-maven-3.8.5/conf/settings.xml, line 202, column 23
[WARNING] 
[INFO] Scanning for projects...
[INFO] 
[INFO] ------------------< org.apache.maven:standalone-pom >-------------------
[INFO] Building Maven Stub Project (No POM) 1
[INFO] --------------------------------[ pom ]---------------------------------
[INFO] 
[INFO] >>> maven-archetype-plugin:3.2.1:generate (default-cli) > generate-sources @ standalone-pom >>>
[INFO] 
[INFO] <<< maven-archetype-plugin:3.2.1:generate (default-cli) < generate-sources @ standalone-pom <<<
[INFO] 
[INFO] 
[INFO] --- maven-archetype-plugin:3.2.1:generate (default-cli) @ standalone-pom ---
[INFO] Generating project in Interactive mode
[INFO] Archetype repository not defined. Using the one from [org.openjfx:javafx-archetype-simple:0.0.6] found in catalog remote
Downloading from central: https://repo.maven.apache.org/maven2/org/openjfx/javafx-archetype-simple/0.0.3/javafx-archetype-simple-0.0.3.pom
Downloaded from central: https://repo.maven.apache.org/maven2/org/openjfx/javafx-archetype-simple/0.0.3/javafx-archetype-simple-0.0.3.pom (511 B at 1.5 kB/s)
Downloading from central: https://repo.maven.apache.org/maven2/org/openjfx/javafx-maven-archetypes/0.0.3/javafx-maven-archetypes-0.0.3.pom
Downloaded from central: https://repo.maven.apache.org/maven2/org/openjfx/javafx-maven-archetypes/0.0.3/javafx-maven-archetypes-0.0.3.pom (4.3 kB at 13 kB/s)
Downloading from central: https://repo.maven.apache.org/maven2/org/openjfx/javafx-archetype-simple/0.0.3/javafx-archetype-simple-0.0.3.jar
Downloaded from central: https://repo.maven.apache.org/maven2/org/openjfx/javafx-archetype-simple/0.0.3/javafx-archetype-simple-0.0.3.jar (4.2 kB at 13 kB/s)
[INFO] Using property: javafx-version = 19
[INFO] Using property: javafx-maven-plugin-version = 0.0.3
[INFO] Using property: groupId = org.openjfx
[INFO] Using property: artifactId = HelloWorldWithMaven
[INFO] Using property: version = 1.0.0
[INFO] Using property: package = org.openjfx
Confirm properties configuration:
javafx-version: 19
javafx-maven-plugin-version: 0.0.3
groupId: org.openjfx
artifactId: HelloWorldWithMaven
version: 1.0.0
package: org.openjfx
 Y: : 
[INFO] ----------------------------------------------------------------------------
[INFO] Using following parameters for creating project from Archetype: javafx-archetype-simple:0.0.3
[INFO] ----------------------------------------------------------------------------
[INFO] Parameter: groupId, Value: org.openjfx
[INFO] Parameter: artifactId, Value: HelloWorldWithMaven
[INFO] Parameter: version, Value: 1.0.0
[INFO] Parameter: package, Value: org.openjfx
[INFO] Parameter: packageInPathFormat, Value: org/openjfx
[INFO] Parameter: package, Value: org.openjfx
[INFO] Parameter: groupId, Value: org.openjfx
[INFO] Parameter: javafx-version, Value: 19
[INFO] Parameter: artifactId, Value: HelloWorldWithMaven
[INFO] Parameter: version, Value: 1.0.0
[INFO] Parameter: javafx-maven-plugin-version, Value: 0.0.3
[INFO] Project created from Archetype in dir: /home/administrador/mnt/hdext/somewritings/javafx/projetos/HelloWorldWithMaven
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  17.547 s
[INFO] Finished at: 2022-11-02T23:53:05-03:00
[INFO] ------------------------------------------------------------------------
[administrador@fedora projetos]$ 

#+end_example


veja o que foi criado...

#+begin_example
[administrador@fedora projetos]$ cd HelloWorldWithMaven/
[administrador@fedora HelloWorldWithMaven]$ tree
.
├── pom.xml
└── src
    └── main
        └── java
            ├── module-info.java
            └── org
                └── openjfx
                    ├── App.java
                    └── SystemInfo.java

5 directories, 4 files
[administrador@fedora HelloWorldWithMaven]$ 

#+end_example


agora entra no pom.xml, encontre a tag <plugins> e perceba que tem la esse plugin abaixo do javafx

#+begin_src xml
<plugin>
        <groupId>org.openjfx</groupId>
        <artifactId>javafx-maven-plugin</artifactId>
        <version>0.0.8</version>
        <configuration>
            <mainClass>HelloFX</mainClass>
        </configuration>
    </plugin>
#+end_src

perceba tambem que o maven ja criou o projeto com a dependencia do javafx na tag <dependencies> do pom.xml

#+begin_src xml
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>19</version>
        </dependency>
#+end_src

agora ja pode rodar..

#+begin_example
mvn clean javafx:run
#+end_example

o resultado e o mesmo que a gente viu la no hello workd com gradle...



* O que sao Containers e Layout?[fn:7][fn:8]
JavaFX Layouts Containers: HBox, VBox, Border Pane, Stack Pane, Text Flow, Anchor Pane, Title Pane, Grid Pane, Flow Panel, etc.
* Tela de login





* Refs
[fn:1] https://openjfx.io/
[fn:2] https://openjfx.io/openjfx-docs/
[fn:3] https://docs.gluonhq.com/#_getting_started
[fn:4] https://openjfx.io/openjfx-docs/#gradle
[fn:5] https://openjfx.io/openjfx-docs/#maven
[fn:6] https://docs.oracle.com/javase/8/javase-clienttechnologies.htm
[fn:7] https://www.tutorialspoint.com/javafx/javafx_layout_panes.htm
[fn:8] https://edencoding.com/javafx-layouts/

#+SETUPFILE: ../etc/org_mode_SETUPFILE.org
#+TITLE: GIT TOPICOS IMPORTANTES

* Adicionando um submodule
  git submodule add https://github.com/spotify/dockerfile-mode.git

  git submodule add --help

* Atualizando o seu repositorio local com o repositorio remoto
  Vamos supor que você fez um clone de um repositorio há algum tempo.
  Então você trabalhou nele, comitou e deu um push pro repositório remoto
  Neste momento o branch do seu repositório local está igual ao branch
  do remoto, considerando que você só fez um push pro mesmo branch,  o
  branch master, por exemplo.

  Só que passou-se uns meses e a equipe (outras pessoas além de
  você...) continuaram trabalhando no projeto e você sabe que o
  pessoal já fizeram outros pushes no repositório.

  Obviamente seu repositório local não está confore o repo remoto.
  Então você agora quer atualizar o seu repo local com o remoto

  TODO: usar o git pull que baixa o conteúdo do repo remoto e faz o
  merge com o seu repo local

** Caso 1
   Se você deu um git fetch antes e tem um FECTH_HEAD

   git merge FETCH_HEAD

   #+BEGIN_SRC sh :eval never
     [wagner@localhost Fedora-Dockerfiles]$ git merge FETCH_HEAD
     Updating 36f9ac4..da7fe32
     Fast-forward
      java-oracle-8/Dockerfile | 34 ++++++++++++++++++++++++++++++++++
      liferay7/Dockerfile      | 52 ++++++++++++++++++++++++++++++++++++++++++++++++++++
      liferay7/docker-build.sh |  2 ++
      liferay7/docker-run.sh   | 11 +++++++++++
      4 files changed, 99 insertions(+)
      create mode 100644 java-oracle-8/Dockerfile
      create mode 100644 liferay7/Dockerfile
      create mode 100755 liferay7/docker-build.sh
      create mode 100755 liferay7/docker-run.sh
     [wagner@localhost Fedora-Dockerfiles]$ 
   #+END_SRC

  


* Veficando as diferenças entre o seu repo local e o remoto
** refs
   http://stackoverflow.com/questions/11935633/git-diff-between-remote-and-local-repo
   http://stackoverflow.com/questions/21101572/git-diff-between-file-in-local-repo-and-origin
   http://stackoverflow.com/questions/1800783/compare-local-git-branch-with-remote-branch
   cherry-piking
   https://www.ibm.com/developerworks/community/blogs/fd26864d-cb41-49cf-b719-d89c6b072893/entry/dica_git_da_semana_cherry_picking?lang=en
   http://stackoverflow.com/questions/9339429/what-does-cherry-picking-a-commit-with-git-mean
** Caso de uso   
  Bom nesta situação você sabe que o pessoal trabalhou no projeto e
  fizeram lá uns pushes e agora você, sabendo que o seu repo local
  está desatualizado com o remoto, está interessado em ver quais são
  as diferenças entre o repo remoto e o seu local.

  Afinal de contas você não quer só atualizar o seu repo local, você
  quer ver antes as diferenças, ou seja, o que a equipe fez e pushou
  pro repo remoto desde o seu último commit local.

  O push não deve ser utilizado nesta situação porque ele vai baixar
  mas vai fazer o merge como seu local. Portanto se você não quer
  mudanças ainda no seu local (claro que não quer porque assim você
  consegue com a ferramente de diff ver as diferenças, se você fizer o
  mege aí não dá mais pra ver) você não usa o git pull, mas sim o git
  fetch.

** procedimentos

   To compare a local working directory against a remote branch, for example origin/master:
   O comando *git fetch origin master* demostrado abaixo diz pro git pra
   baixar pro seu repo local o branch "master" do repositório remoto
   "origin". Lembrando que o git vai fazer esse download mas não vai
   alterar em nada os arquivos do seu repositório local.
   Se você olhar com calma você vai perceber que o git está dando um
   aviso pra você através da linha

   ,* branch            master     -> FETCH_HEAD

   Se você é usuário de linux vai ficar bem fácil perceber que essa
   flechinha "->" tá indicando algo semelhante ao link simbólico
   indicando portanto que o branch master baixado pode ser
   referenciado por "FECTH_HEAD".
   Se esse negócio de link simbólico não tem muito a ver contigo só
   lembre então que você pode referenciar o branch master do
   repositório remoto por "FETCH_HEAD".


   #+BEGIN_SRC sh :eval never
     [wagner@localhost Fedora-Dockerfiles]$ git fetch origin master
     remote: Counting objects: 10, done.
     remote: Total 10 (delta 2), reused 2 (delta 2), pack-reused 8
     Unpacking objects: 100% (10/10), done.
     From https://github.com/wagnermarques/Fedora-Dockerfiles
      ,* branch            master     -> FETCH_HEAD
        36f9ac4..da7fe32  master     -> origin/master
     [wagner@localhost Fedora-Dockerfiles]$ 
   #+END_SRC
   
   Bom você fez o fecth do branch remoto e sabe que pode se referir a
   ele por "FECTH_HEAD". 
   Agora vamos então ver as diferenças que estamos interessandos
   usando o comando *git diff --summary FETCH_HEAD*
   Acompanhe isso abaixo

   #+BEGIN_SRC sh :eval never
     [wagner@localhost Fedora-Dockerfiles]$ git diff --summary FETCH_HEAD
      delete mode 100644 java-oracle-8/Dockerfile
      delete mode 100644 liferay7/Dockerfile
      delete mode 100755 liferay7/docker-build.sh
      delete mode 100755 liferay7/docker-run.sh
     [wagner@localhost Fedora-Dockerfiles]$ 
   #+END_SRC


   Pra ver as diferenças em detalhes, arquivo por arquivo,
   experimente.
   Não vou colocar a saída do meu comando porque no meu caso veio
   muita coisa, mas é só ler os diffs que o git te mostrar conforme
   fizemos lá na atividade pedagógica "introdução ao git".
   
   #+BEGIN_SRC sh :eval never
     git diff master FETCH_HEAD
   #+END_SRC


   Pode ser que você tenha achado essa saída muito grande, ou seja,
   muito detalhada. Talvez você queira ver apenas os commits que
   separam o seu repo local do remoto. Pra isso use não o diff mas o
   cherry. Vamo ver..


   #+BEGIN_SRC sh :eval never
     [wagner@localhost Fedora-Dockerfiles]$ git cherry master origin/master
       + ecfd2ea8f890889e6e0b64ac52a0526b55209c0c
       + da7fe32b7d43e7d46c187bf80426bd68f5116cd5
     [wagner@localhost Fedora-Dockerfiles]$ 
   #+END_SRC

   Ok, você deve estar se perguntando... que que eu vou fazer com
   esses ids de commits. Faria mais sentido trazer as mensagens deles.
   Ok, use a opção -v, conforme abaixo.
   Lembrando que substituir origin/master por FETCH_HEAD dá no mesmo.

   #+BEGIN_SRC sh :eval never
     [wagner@localhost Fedora-Dockerfiles]$ git cherry -v master origin/master
     + ecfd2ea8f890889e6e0b64ac52a0526b55209c0c added java-oracle-8 Dockerfile
     + da7fe32b7d43e7d46c187bf80426bd68f5116cd5 instable changes in mariadb Dockerfille and Add lifaray7 Dockerfile
     [wagner@localhost Fedora-Dockerfiles]$ 
   #+END_SRC


   Agora a mesma informação com alguns detalhes a mais, como o autor
   das mudanças.
   

   #+BEGIN_SRC sh :eval never
     [wagner@localhost Fedora-Dockerfiles]$ git log origin/master ^master
     commit da7fe32b7d43e7d46c187bf80426bd68f5116cd5
     Author: wagnermarques <wagnerdocri@gmail.com>
     Date:   Sun Jan 29 01:17:44 2017 -0200

         instable changes in mariadb Dockerfille and Add lifaray7 Dockerfile

     commit ecfd2ea8f890889e6e0b64ac52a0526b55209c0c
     Author: wagnermarques <wagnerdocri@gmail.com>
     Date:   Fri Jan 27 19:26:17 2017 -0200

         added java-oracle-8 Dockerfile
     [wagner@localhost Fedora-Dockerfiles]$ 

   #+END_SRC
   


   

  

* Verificando as diferenças entre o seu repo local e o remo, só que apenas de um arquivo
** refs
   http://stackoverflow.com/questions/21101572/git-diff-between-file-in-local-repo-and-origin
   
** procedimentos


* UTILS   
   #+BEGIN_SRC sh :eval never
   #+END_SRC
   

   #+BEGIN_SRC sh :eval never
   #+END_SRC
   

   #+BEGIN_SRC sh :eval never
   #+END_SRC
   

   #+BEGIN_SRC sh :eval never
   #+END_SRC
   

   #+BEGIN_SRC sh :eval never
   #+END_SRC
